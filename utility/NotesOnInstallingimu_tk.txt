Start with Raspbian full standard installation

sudo apt-get update
sudo apt-get upgrade
sync && sudo reboot
sudo apt-get install build-essential cmake libeigen3-dev libqt4-dev libqt4-opengl-dev freeglut3-dev gnuplot libxmu-dev libxi-dev libgoogle-glog-dev libatlas-base-dev libsuitesparse-dev libboost-dev screen cmake-curses-gui
wget http://ceres-solver.org/ceres-solver-1.14.0.tar.gz
tar xzvf ceres-solver-1.14.0.tar.gz
nano /etc/dphys-swapfile
#change swapfile size to 500. Probably overkill but leave it like this after installation as memory usage for actual calibration runs is huge
sudo systemctl restart dphys-swapfile
mkdir ceres-bin
cd ceres-bin
ccmake ../ceres-solver-1.14.0
# configure
# set build testing to no
# set build examples to no
# configure
# generate
make
#(make will take a long while)
sudo make install

wget https://bitbucket.org/alberto_pretto/imu_tk/get/7780270fb9a2.zip -O imu_tk.zip
unzip imu_tk.zip
cd alberto_pretto-imu_tk-7780270fb9a2/
nano CMakeLists.txt
# add this to the examples section of the file (towards the bottom) (without the hashes)
# add_executable(BBimu_tk apps/BBimu_tk.cpp)
# target_link_libraries( BBimu_tk ${IMU_TK_LIBS})
# set_target_properties( BBimu_tk PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)

#copy the BBimu_tk.cpp file to alberto_pretto-imu_tk-7780270fb9a2/apps directory
mkdir build
cd build
cmake ..
### if using gcc version > 6 (eg on Buster), install gcc-6 and g++-6 and run cmake something like this 'cmake -D CMAKE_C_COMPILER="/usr/bin/gcc-6" -D CMAKE_CXX_COMPILER="/usr/bin/g++-6" ..'
make

#install bcm2835 library - see setupBB.sh
#compile calibrate.c needs ICM20689.h
gcc calibrate.c -o calibrate -lbcm2835
# put BBimu_tk (in alberto_pretto-imu_tk-7780270fb9a2/bin) into same directory as calibrate program
# shutdown

## to do a calibration run
# with bellboy PCB installed on header of Pi
# power on system - best to run this after a reboot
# can use battery power if this is running on a zero, if not, power Pi separately and remove battery from bellboy PCB
# run calibrate
# enter SAMP: to get sample period a few times - check numbers are sane and stable (on multiple entries) - near to 0.002 for sample period
# enter CALI: to start calibration run
# keep device stable for at least 50 secs and then move into 20-30 different positions each stable for at least 3-4 seconds(ish)
# ensure that there is a full range of positions (important)
# if EOVF: appears then ctrl-c to exit, reboot and try again
# enter STCA:
# (will now run imu_tk calibration)
# ???high residuals (>2) are an indication that something is not right 
# OK for EOVF: to appear after calibration is finished
# enter SAVE:
# check numbers are sane:
    # all bias numbers close to 0
    # all transform numbers close to 1 on diagonal and close to zero otherwise
# if not sane - ctrl-c to exit within 20 secs. Reboot and try again
# if ctrl-c is not entered, calibration is saved to arduino on bellboy device automatically

